var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#SLH-type","page":"API","title":"SLH type","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.SLH","page":"API","title":"SLHQuantumSystems.SLH","text":"SLH(name, inputs, outputs, S, L, H)\n\nAn SLH triple describes an open quantum system. See Combes, arXiv.1611.00375\n\nThe name of the system should be unique. When multiple systems are combined, the names of their inputs and outputs will  have the system name appended to them. The inputs and outputs describe 'ports' where signals leave and enter the system. Quantum systems must have the same number of inputs and outputs, which we denote by n.\n\nsize(S) = (n, n) <- S is an nxn matrix\n\nsize(L) = (n,)\n\nsize(H) = ()\n\nThe two ways of combining SLH systems are concatenate() and feedbackreduce()\n\n\n\n\n\n","category":"type"},{"location":"api/#SLH-Operations","page":"API","title":"SLH Operations","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.concatenate","page":"API","title":"SLHQuantumSystems.concatenate","text":"concatenate(name, syslist::Vector{SLH})\n\ncreates a composite system with no interconnections. Combes eq. 59\n\nWhen systems are concatenated, the names of their inputs, outputs, operators, parameters, and Hilbert spaces are 'promoted' by prepending the name of the  system to the existing name. This prevents name collisions as long as all  SLHSystems are created with a unique name.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.feedbackreduce","page":"API","title":"SLHQuantumSystems.feedbackreduce","text":"feedbackreduce(A::SLH,output,input)\n\nConnects the output port to the input port, reducing the number of outputs and inputs by one each. Combes eq 61.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.operators","page":"API","title":"SLHQuantumSystems.operators","text":"operators(sys)\n\nreturns all the quantum operators contained in the system's Hamiltonian.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.parameters","page":"API","title":"SLHQuantumSystems.parameters","text":"parameters(sys)\n\nreturns all the symbolic numbers contained in the system's Hamiltonian and coupling vector L.\n\n\n\n\n\n","category":"function"},{"location":"api/#Symbolic-Utilities","page":"API","title":"Symbolic Utilities","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.get_qnumbers","page":"API","title":"SLHQuantumSystems.get_qnumbers","text":"get_qnumbers(expr)\n\nExtract all quantum operators from an expression.\n\nArguments\n\nexpr: A symbolic expression\n\nReturns\n\nSet: Set of quantum operators found in the expression\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.get_cnumbers","page":"API","title":"SLHQuantumSystems.get_cnumbers","text":"get_numsymbols(expr)\n\nExtract all symbolic parameters from an expression.\n\nArguments\n\nexpr: A symbolic expression\n\nReturns\n\nSet: Set of symbolic parameters found in the expression\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.get_additive_terms","page":"API","title":"SLHQuantumSystems.get_additive_terms","text":"get_additive_terms(expr)\n\nExtract additive terms from a quantum operator expression.\n\nTakes an expression containing quantum operators and returns a list of terms that contain no addition, only multiplication. Summing all returned terms results in the original expression.\n\nArguments\n\nexpr: A symbolic expression containing quantum operators\n\nReturns\n\nVector: List of terms without addition operators\n\n\n\n\n\n","category":"function"},{"location":"api/#Component-Library","page":"API","title":"Component Library","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.cavity","page":"API","title":"SLHQuantumSystems.cavity","text":"cavity(name)\n\nCreate a basic optical cavity SLH system.\n\nCreates a single-mode cavity with detuning and decay. The cavity has one input  and one output port with direct transmission (S=1).\n\nArguments\n\nname: Symbol identifying the cavity (used for operator and parameter naming)\n\nReturns\n\nSLH: System with Hamiltonian H = Δ·a†a and coupling L = [√κ·a]\n\nParameters\n\nκ: Cavity decay rate\nΔ: Cavity detuning from driving field\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.squeezing_cavity","page":"API","title":"SLHQuantumSystems.squeezing_cavity","text":"squeezing_cavity(name)\n\nCreate a squeezing cavity SLH system.\n\nCreates a cavity that generates squeezed light through a parametric  interaction (two-mode squeezing Hamiltonian).\n\nArguments\n\nname: Symbol identifying the cavity (used for operator and parameter naming)\n\nReturns\n\nSLH: System with squeezing Hamiltonian H = iϵ(a†² - a²) and coupling L = [√κ·a]\n\nParameters\n\nκ: Cavity decay rate\nϵ: Squeezing strength \n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.radiation_pressure_cavity","page":"API","title":"SLHQuantumSystems.radiation_pressure_cavity","text":"radiation_pressure_cavity(name)\n\nCreate an optomechanical cavity with radiation pressure coupling.\n\nCreates a two-mode system with an optical cavity mode coupled to a  mechanical oscillator through radiation pressure.\n\nArguments\n\nname: Symbol identifying the system (used for operator and parameter naming)\n\nReturns\n\nSLH: Optomechanical system with optical and mechanical modes\n\nParameters\n\nκ: Cavity decay rate\nΔ: Cavity detuning\nΩ: Mechanical frequency\ng: Optomechanical coupling strength\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.qed_cavity","page":"API","title":"SLHQuantumSystems.qed_cavity","text":"qed_cavity(name)\n\nCreate a cavity QED system with a two-level atom.\n\nCreates a cavity containing a two-level atom with Jaynes-Cummings coupling and an external driving field.\n\nArguments\n\nname: Symbol identifying the system (used for operator and parameter naming)\n\nReturns\n\nSLH: System with cavity-atom interaction and driving\n\nParameters\n\nΔ: Cavity detuning\ng: Atom-cavity coupling strength  \nκ: Cavity decay rate\nh: External driving amplitude\n\n\n\n\n\n","category":"function"},{"location":"api/#Function-Index","page":"API","title":"Function Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"generated/cascadedcavities/#Cascaded-Cavities-Example","page":"Cascadedcavities","title":"Cascaded Cavities Example","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"This example demonstrates how to create and compose quantum systems using the SLH framework by building a cascaded cavity system.","category":"page"},{"location":"generated/cascadedcavities/#Setup","page":"Cascadedcavities","title":"Setup","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"First, we import the required packages:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"using SLHQuantumSystems\nusing SecondQuantizedAlgebra","category":"page"},{"location":"generated/cascadedcavities/#Creating-the-Hilbert-Space-and-Operators","page":"Cascadedcavities","title":"Creating the Hilbert Space and Operators","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"We start by defining a Fock space for our cavity and the associated operators:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"Create a Hilbert space and operators","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"hilb = FockSpace(:cavity)\n\n@qnumbers a::Destroy(hilb)\n@cnumbers ω κ","category":"page"},{"location":"generated/cascadedcavities/#Defining-System-Components","page":"Cascadedcavities","title":"Defining System Components","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"In the SLH framework, each system is characterized by three components:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"S: Scattering matrix (direct input-output coupling)\nL: Coupling vector (system-environment interaction)\nH: System Hamiltonian (internal dynamics)","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"For a simple cavity, we define:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"Define system components","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"H = ω * a' * a      # Harmonic oscillator Hamiltonian\nL = [sqrt(κ) * a]   # Coupling to environment (decay)\nS = [1]             # No direct scattering","category":"page"},{"location":"generated/cascadedcavities/#Building-the-Cascaded-System","page":"Cascadedcavities","title":"Building the Cascaded System","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"Now we create two identical cavity systems and connect them in a cascade:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"Create SLH systems","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"cavityA = SLH(:A, [:in], [:out], S, L, H)\ncavityB = SLH(:B, [:in], [:out], S, L, H)","category":"page"},{"location":"generated/cascadedcavities/#System-Composition","page":"Cascadedcavities","title":"System Composition","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"We concatenate the systems in a chain configuration, then apply feedback to connect the output of cavity A to the input of cavity B:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"sys = concatenate([cavityA, cavityB], :chain)\nsys = feedbackreduce(sys, :A_out, :B_in)","category":"page"},{"location":"generated/cascadedcavities/#Results","page":"Cascadedcavities","title":"Results","text":"","category":"section"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"Let's examine the resulting system:","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"println(\"Combined system Hamiltonian:\")\nprintln(sys.H)\n\nprintln(\"\\nSystem operators:\")\nprintln(operators(sys))\n\nprintln(\"\\nSystem parameters:\")\nprintln(parameters(sys))","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"","category":"page"},{"location":"generated/cascadedcavities/","page":"Cascadedcavities","title":"Cascadedcavities","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literate-workflow/#Literate.jl-Workflow","page":"Literate Workflow","title":"Literate.jl Workflow","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"This documentation uses Literate.jl to automatically generate documentation pages from executable Julia scripts. This approach ensures that a single file can be executed directly while also serving as formatted documentation with explanations.","category":"page"},{"location":"literate-workflow/#How-It-Works-Script-Discovery-and-Generation","page":"Literate Workflow","title":"How It Works - Script Discovery and Generation","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"When the documentation is built (julia docs/make.jl), the following process occurs:","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"Auto-discovery: The build system scans examples/ for all .jl files\nConversion: Each script is processed by Literate.jl to generate markdown in docs/src/generated/\nIntegration: Generated markdown files are automatically added to the documentation by adding pages in make.jl","category":"page"},{"location":"literate-workflow/#Writing-Literate-Scripts","page":"Literate Workflow","title":"Writing Literate Scripts","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"Literate.jl uses a simple convention for mixing code and documentation:","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"Documentation: Lines starting with # (with a space) become markdown\nCode: Regular Julia code becomes executable code blocks\nHeaders: Use # # Header for markdown headers (note the extra #)","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"See the Literate.jl docs for more information.","category":"page"},{"location":"literate-workflow/#File-Organization","page":"Literate Workflow","title":"File Organization","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"SLHQuantumSystems.jl/\n├── examples/\n│   ├── cascadedcavities.jl     # Literate script\n│   └── newexample.jl           # Automatically discovered\n├── docs/\n│   ├── src/\n│   │   ├── generated/          # Auto-generated (don't edit!)\n│   │   │   ├── cascadedcavities.md\n│   │   │   └── newexample.md\n│   │   └── index.md\n│   ├── generate.jl             # Generation script\n│   └── make.jl                 # Documentation build","category":"page"},{"location":"literate-workflow/#Adding-New-Examples","page":"Literate Workflow","title":"Adding New Examples","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"To add a new example to the documentation:","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"Create the script: Add a new .jl file to the examples/ directory\nUse Literate format: Write using the comment conventions above","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"No manual configuration is needed! The system automatically:","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"Discovers the new file\nConverts it to markdown\nAdds it to the documentation navigation\nCreates a properly formatted title from the filename","category":"page"},{"location":"literate-workflow/#Manual-Testing","page":"Literate Workflow","title":"Manual Testing","text":"","category":"section"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"You can test individual examples by running them directly:","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"julia> include(\"examples/cascadedcavities.jl\")","category":"page"},{"location":"literate-workflow/","page":"Literate Workflow","title":"Literate Workflow","text":"This ensures that your examples actually work before they become documentation.","category":"page"},{"location":"generated/fabry_perot/","page":"Fabry_Perot","title":"Fabry_Perot","text":"Here we define a one-sided Fabry-Perot cavity as an SLH system, and perform some simple numerical experiments on it to demonstrate basic simulations with physical parameters","category":"page"},{"location":"generated/fabry_perot/","page":"Fabry_Perot","title":"Fabry_Perot","text":"using SecondQuantizedAlgebra\nusing QuantumOptics\nusing SLHQuantumSystems\n\nhilb = FockSpace(:cav)\na = Destroy(hilb, :a)\n\n@cnumbers ω κ\n\ncav = SLH(:cav,[:in],[:out],[1],[√κ*a],ω*a'*a)\n\n#nH = to_numeric(cavity.H, FockBasis(10))","category":"page"},{"location":"generated/fabry_perot/","page":"Fabry_Perot","title":"Fabry_Perot","text":"","category":"page"},{"location":"generated/fabry_perot/","page":"Fabry_Perot","title":"Fabry_Perot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#SLHQuantumSystems.jl","page":"Home","title":"SLHQuantumSystems.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SLHQuantumSystems.jl is a Julia package for creating and composing open quantum systems using the SLH framework. ","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Get started by running one of the examples!","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/cascadedcavities.jl\")","category":"page"},{"location":"#Overview-of-SLH-systems","page":"Home","title":"Overview of SLH systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLH framework represents each open quantum systems with three components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"S: Scattering matrix describing direct input-output coupling of external (bath) modes\nL: Coupling vector describing the interaction of the internal modes with the external modes \nH: System Hamiltonian describing internal dynamics","category":"page"},{"location":"#Component-Library","page":"Home","title":"Component Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLH framework enables you to create complicated quantum systems by combining simple, reusable components","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pre-built quantum components including:\nBasic cavities\nSqueezing cavities  \nRadiation pressure cavities\nJaynes-Cummings QED cavity","category":"page"},{"location":"#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SecondQuantizedAlgebra.jl provides the symbolic algebra system for quantum operators","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was inspired by QNET, a python package for working with SLH systems.\nThe SLH framework for modeling quantum input-output networks","category":"page"},{"location":"generated/cavityfeedback/","page":"Cavityfeedback","title":"Cavityfeedback","text":"using SLHQuantumSystems\nusing SecondQuantizedAlgebra\n\nhilb = FockSpace(:cavity)\n\na = Destroy(hilb,:a)\n@cnumbers ω κ\n\nH = ω*a'*a\nL = [√κ*a]\nS = [1]\n\ncavityA = SLH(:A,[:in],[:out],S,L,H)\ncavityB = SLH(:B,[:in],[:out],S,L,H)\n\nsys = concatenate([cavityA,cavityB],:loop)\n\nsys = feedbackreduce(sys,:A_out,:B_in)\nsys = feedbackreduce(sys,:B_out,:A_in)","category":"page"},{"location":"generated/cavityfeedback/","page":"Cavityfeedback","title":"Cavityfeedback","text":"","category":"page"},{"location":"generated/cavityfeedback/","page":"Cavityfeedback","title":"Cavityfeedback","text":"This page was generated using Literate.jl.","category":"page"}]
}
