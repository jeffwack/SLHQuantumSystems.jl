var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#SLH-type","page":"API","title":"SLH type","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.SLH","page":"API","title":"SLHQuantumSystems.SLH","text":"SLH(name, inputs, outputs, S, L, H)\n\nAn SLH triple describes an open quantum system. See Combes, arXiv.1611.00375\n\nThe name of the system should be unique. When multiple systems are combined, the names of their inputs and outputs will  have the system name appended to them. The inputs and outputs describe 'ports' where signals leave and enter the system. Quantum systems must have the same number of inputs and outputs, which we denote by n.\n\nsize(S) = (n, n) <- S is an nxn matrix\n\nsize(L) = (n,)\n\nsize(H) = ()\n\nThe two ways of combining SLH systems are concatenate() and feedbackreduce()\n\n\n\n\n\n","category":"type"},{"location":"api/#SLH-Operations","page":"API","title":"SLH Operations","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.concatenate","page":"API","title":"SLHQuantumSystems.concatenate","text":"concatenate(name, syslist::Vector{SLH})\n\ncreates a composite system with no interconnections. Combes eq. 59\n\nWhen systems are concatenated, the names of their inputs, outputs, operators, parameters, and Hilbert spaces are 'promoted' by prepending the name of the  system to the existing name. This prevents name collisions as long as all  SLHSystems are created with a unique name.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.feedbackreduce","page":"API","title":"SLHQuantumSystems.feedbackreduce","text":"feedbackreduce(A::SLH,output,input)\n\nConnects the output port to the input port, reducing the number of outputs and inputs by one each. Combes eq 61.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.operators","page":"API","title":"SLHQuantumSystems.operators","text":"operators(sys)\n\nreturns all the quantum operators contained in the system's Hamiltonian.\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.parameters","page":"API","title":"SLHQuantumSystems.parameters","text":"parameters(sys)\n\nreturns all the symbolic numbers contained in the system's Hamiltonian and coupling vector L.\n\n\n\n\n\n","category":"function"},{"location":"api/#Symbolic-Utilities","page":"API","title":"Symbolic Utilities","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.get_qsymbols","page":"API","title":"SLHQuantumSystems.get_qsymbols","text":"get_qsymbols(expr)\n\nExtract all quantum operators from an expression.\n\nRecursively traverses a symbolic expression and returns all quantum operators (objects that are neither numbers nor symbolic parameters).\n\nArguments\n\nexpr: A symbolic expression containing quantum operators and/or parameters\n\nReturns\n\nSet: Set of quantum operators found in the expression\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.get_numsymbols","page":"API","title":"SLHQuantumSystems.get_numsymbols","text":"get_numsymbols(expr)\n\nExtract all symbolic parameters from an expression.\n\nRecursively traverses a symbolic expression and returns all symbolic parameters (SymbolicUtils.Symbolic objects like those created with @cnumbers).\n\nArguments\n\nexpr: A symbolic expression containing quantum operators and/or parameters\n\nReturns\n\nSet: Set of symbolic parameters found in the expression\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.get_additive_terms","page":"API","title":"SLHQuantumSystems.get_additive_terms","text":"get_additive_terms(expr)\n\nExtract additive terms from a quantum operator expression.\n\nTakes an expression containing quantum operators and returns a list of terms that contain no addition, only multiplication. Summing all returned terms results in the original expression.\n\nArguments\n\nexpr: A symbolic expression containing quantum operators\n\nReturns\n\nVector: List of terms without addition operators\n\n\n\n\n\n","category":"function"},{"location":"api/#Component-Library","page":"API","title":"Component Library","text":"","category":"section"},{"location":"api/#SLHQuantumSystems.cavity","page":"API","title":"SLHQuantumSystems.cavity","text":"cavity(name)\n\nCreate a basic optical cavity SLH system.\n\nCreates a single-mode cavity with detuning and decay. The cavity has one input  and one output port with direct transmission (S=1).\n\nArguments\n\nname: Symbol identifying the cavity (used for operator and parameter naming)\n\nReturns\n\nSLH: System with Hamiltonian H = Δ·a†a and coupling L = [√κ·a]\n\nParameters\n\nκ: Cavity decay rate\nΔ: Cavity detuning from driving field\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.squeezing_cavity","page":"API","title":"SLHQuantumSystems.squeezing_cavity","text":"squeezing_cavity(name)\n\nCreate a squeezing cavity SLH system.\n\nCreates a cavity that generates squeezed light through a parametric  interaction (two-mode squeezing Hamiltonian).\n\nArguments\n\nname: Symbol identifying the cavity (used for operator and parameter naming)\n\nReturns\n\nSLH: System with squeezing Hamiltonian H = iϵ(a†² - a²) and coupling L = [√κ·a]\n\nParameters\n\nκ: Cavity decay rate\nϵ: Squeezing strength \n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.radiation_pressure_cavity","page":"API","title":"SLHQuantumSystems.radiation_pressure_cavity","text":"radiation_pressure_cavity(name)\n\nCreate an optomechanical cavity with radiation pressure coupling.\n\nCreates a two-mode system with an optical cavity mode coupled to a  mechanical oscillator through radiation pressure.\n\nArguments\n\nname: Symbol identifying the system (used for operator and parameter naming)\n\nReturns\n\nSLH: Optomechanical system with optical and mechanical modes\n\nParameters\n\nκ: Cavity decay rate\nΔ: Cavity detuning\nΩ: Mechanical frequency\ng: Optomechanical coupling strength\n\n\n\n\n\n","category":"function"},{"location":"api/#SLHQuantumSystems.qed_cavity","page":"API","title":"SLHQuantumSystems.qed_cavity","text":"qed_cavity(name)\n\nCreate a cavity QED system with a two-level atom.\n\nCreates a cavity containing a two-level atom with Jaynes-Cummings coupling and an external driving field.\n\nArguments\n\nname: Symbol identifying the system (used for operator and parameter naming)\n\nReturns\n\nSLH: System with cavity-atom interaction and driving\n\nParameters\n\nΔ: Cavity detuning\ng: Atom-cavity coupling strength  \nκ: Cavity decay rate\nh: External driving amplitude\n\n\n\n\n\n","category":"function"},{"location":"api/#Function-Index","page":"API","title":"Function Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"#SLHQuantumSystems.jl","page":"Home","title":"SLHQuantumSystems.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SLHQuantumSystems.jl is a Julia package for creating and composing open quantum systems using the SLH framework. ","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SLHQuantumSystems\nusing SecondQuantizedAlgebra\n\n# Create a Hilbert space and operators\nhilb = FockSpace(:cavity)\n\n@qnumbers a::Destroy(hilb)\n@cnumbers ω κ\n\n# Define system components \nH = ω * a' * a\nL = [sqrt(κ) * a]\nS = [1]\n\n# Create SLH systems\ncavityA = SLH(:A, [:in], [:out], S, L, H)\ncavityB = SLH(:B, [:in], [:out], S, L, H)\n\nsys = concatenate([cavityA, cavityB],:chain)\nsys = feedbackreduce(sys, :A_out, :B_in)\n\nprintln(sys.H)\n\n# Extract information\nprintln(operators(sys))        # Get quantum operators\nprintln(parameters(sys))    # Get symbolic parameters","category":"page"},{"location":"#Overview-of-SLH-systems","page":"Home","title":"Overview of SLH systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLH framework represents each open quantum systems with three components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"S: Scattering matrix describing direct input-output coupling of external (bath) modes\nL: Coupling vector describing the interaction of the internal modes with the external modes \nH: System Hamiltonian describing internal dynamics","category":"page"},{"location":"#Component-Library","page":"Home","title":"Component Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLH framework enables you to create complicated quantum systems by combining simple, reusable components","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pre-built quantum components including:\nBasic cavities\nSqueezing cavities  \nRadiation pressure cavities\nJaynes-Cummings QED cavity","category":"page"},{"location":"#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SecondQuantizedAlgebra.jl provides the symbolic algebra system for quantum operators","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SLH framework for modeling quantum input-output networks","category":"page"}]
}
